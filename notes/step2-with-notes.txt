const Sequelize = require('sequelize');

const sequelize = new Sequelize({
    //which version of SQL is being used in the database
    dialect: 'sqlite',
    //specifies file path for database. Creates a movies.db
    storage: 'movies.db',
    //removes console logging of SQL commands
    logging: false
});
//Movie Model
// Models are often defined as JavaScript classes. Each model (or class) 
//represents a thing that your application will be working with â€“ all of the nouns
class Movie extends Sequelize.Model{}
  //initates the new Movie model, creates a new table in the DB
Movie.init(
    //first object literal defines COLUMNS of the table
    {
      //key + value is a data type
    title: Sequelize.STRING
    },
    //model options. Only required one is sequelize property
    { sequelize: sequelize }
)
//DATABASE CONNECTION - - - - -
// IIFE (Immediately Invoked Function Expression) created: (function)();
//run via npm start. Console should show 'connection success' and a new movies.db file should appear
(async () => {
    //Movie.sync() synchronizes table from db, sequelize.sync() does all
    await sequelize.sync( 
        //force completely drops & recreates table each time
        { force: true } );
  try{
    // Instance of the Movie class represents a database row
    const movie = await Movie.create({
        title: 'Toy Story',
    });
    // without declaring variable, simply await
    await Movie.create({
      title: 'Star Wars',});
    console.log(movie.toJSON())
    // OR: 
    const movies = await Promise.all([
      Movie.create({
        title: 'Movie1',}),
        Movie.create({
          title: 'Movie2',})
        ])

//AUTHENTICATE DB CONNECTION
    // await sequelize.authenticate();
    // console.log("connection success")
  }catch(error){
    console.error("Database error: ", error)
  }
})();